<!DOCTYPE html>
<html lang="en">
	<head>
		<%- include('./headtag'); %>
	</head>
<body>
    <%- include('./navbar'); %>

    <h1>Edit Schedule</h1>

    <!-- Edit Schedule Form -->
    <form id="editScheduleForm" action="/schedules/edit/<%= schedule.schedule_id %>" method="post">
        <input type="hidden" name="schedule_season" value="<%= schedule.schedule_season %>">
        <label for="schedule_week">Schedule Week:</label>
        <input type="number" id="schedule_week" name="schedule_week" value="<%= schedule.schedule_week %>" required />
        <br /><br />        
        <label for="schedule_time">Schedule Date and Time:</label>
        <input type="datetime-local" id="schedule_time" name="schedule_time" value="<%= schedule.schedule_date %><%= schedule.schedule_timestamp %>" required />
        <br /><br />
        <label for="schedule_home">Home Team:</label>
        <select id="schedule_home" name="schedule_home" required>
            <% teams.forEach(team => { %>
                <option value="<%= team.team_id %>" <%= team.team_id == schedule.schedule_home ? 'selected' : '' %>><%= team.team_name %></option>
            <% }); %>
        </select>
        <br /><br />
        <label for="schedule_visitor">Away Team:</label>
        <select id="schedule_visitor" name="schedule_visitor" required>
            <% teams.forEach(team => { %>
                <option value="<%= team.team_id %>" <%= team.team_id == schedule.schedule_visitor ? 'selected' : '' %>><%= team.team_name %></option>
            <% }); %>
        </select>
        <br /><br />
        <label for="schedule_sk_team">Scorekeeper Team:</label>
        <select id="schedule_sk_team" name="schedule_sk_team" required>
            <% teams.forEach(team => { %>
                <option value="<%= team.team_id %>" <%= team.team_id == schedule.schedule_sk_team ? 'selected' : '' %>><%= team.team_name %></option>
            <% }); %>
        </select>
        <br /><br />
        <label for="schedule_scorekeeper">Score Keeper:</label>
        <select id="schedule_scorekeeper" name="schedule_scorekeeper" required>
            <!-- Scorekeeper options will be dynamically populated here -->
        </select>
        <br /><br />
        <label for="schedule_ref1">Referee 1:</label>
        <select id="schedule_ref1" name="schedule_ref1" required>
            <% players.forEach(player => { %>
                <option value="<%= player.player_id %>" <%= player.player_id == schedule.schedule_ref1 ? 'selected' : '' %>><%= player.player_first %> <%= player.player_last %></option>
            <% }); %>
        </select>
        <br /><br />
        <label for="schedule_ref2">Referee 2:</label>
        <select id="schedule_ref2" name="schedule_ref2" required>
            <% players.forEach(player => { %>
                <option value="<%= player.player_id %>" <%= player.player_id == schedule.schedule_ref2 ? 'selected' : '' %>><%= player.player_id !== 1 ? `${player.player_first} ${player.player_last}` : 'TBD' %></option>
            <% }); %>
        </select>
        <br /><br />
        <label for="schedule_ref3">Referee 3:</label>
        <select id="schedule_ref3" name="schedule_ref3" required>
            <% players.forEach(player => { %>
                <option value="<%= player.player_id %>" <%= player.player_id == schedule.schedule_ref3 ? 'selected' : '' %>><%= player.player_id !== 1 ? `${player.player_first} ${player.player_last}` : 'TBD' %></option>
            <% }); %>        
        </select>
        <br /><br />
        <label for="schedule_ref4">Referee 4:</label>
        <select id="schedule_ref4" name="schedule_ref4" required>
            <% players.forEach(player => { %>
                <option value="<%= player.player_id %>" <%= player.player_id == schedule.schedule_ref4 ? 'selected' : '' %>><%= player.player_id !== 1 ? `${player.player_first} ${player.player_last}` : 'TBD' %></option>
            <% }); %>
        </select>
        <br /><br />

        <!-- Checkbox for schedule_postponed -->
        <label for="schedule_postponed">Postponed:</label>
        <input type="checkbox" id="schedule_postponed" name="schedule_postponed" <%= schedule.schedule_postponed ? 'checked' : '' %> />
        <br /><br />

        <label for="schedule_makeup">This is a makeup game:</label>
        <input type="radio" id="schedule_makeup_1" name="schedule_makeup" data-test="<%= schedule.schedule_makeup %>" value="1" <%= schedule.schedule_makeup !== 0 ? 'checked' : '' %> />
        <label for="schedule_makeup_1">Yes</label>
        <input type="radio" id="schedule_makeup_0" name="schedule_makeup" value="0" <%= schedule.schedule_makeup === 0 ? 'checked' : '' %> />
        <label for="schedule_makeup_0">No</label>
        

        
        <br /><br />
        <div id="schedule_makeup">
            <label for="schedule_makeupwk">Schedule Week:</label>
            <select id="schedule_makeupwk" name="schedule_makeupwk" required>
                <% for (let i = 1; i <= totalWeeks; i++) { %>
                    <option value="<%= i %>" <%= i == schedule.schedule_makeupwk ? 'selected' : '' %>>Week <%= i %></option>
                <% } %>
            </select>
            <br /><br />
            <!-- Add the matchups dropdown -->
            <label for="schedule_makeupgm">Matchup:</label>
            <select id="schedule_makeupgm" name="schedule_makeupgm" required>
                <!-- Matchup options will be dynamically populated here -->
            </select>
            <br /><br />    
        </div>
        

        <button type="submit">Update Schedule</button>
    </form>

    <!-- Include any additional JavaScript scripts here -->
    <script>
        // Function to populate matchups select based on selected week and season
        function populateMatchupsSelect(week, season) {
            fetch(`/schedules/matchups/${season}/${week}`) // Replace with actual route to fetch matchups
                .then(response => response.json())
                .then(matchups => {
                    const matchupSelect = document.getElementById('schedule_makeupgm');
                    matchupSelect.innerHTML = ''; // Clear existing options
                    // Populate matchups select
                    
                    matchups.forEach(matchup => {
                        const option = document.createElement('option');
                        option.value = matchup.schedule_id;
                        option.textContent = `${matchup.home_team_name} vs ${matchup.away_team_name}`;
                        matchupSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching matchups:', error));
        }

        // Function to populate score keeper select based on selected team
        function populateScoreKeeperSelect(teamId) {
            fetch(`/teams/edit/${teamId}/players`) // Replace with actual route to fetch players of a team
                .then(response => response.json())
                .then(players => {
                                        
                    const scoreKeeperSelect = document.getElementById('schedule_scorekeeper');
                    if (!scoreKeeperSelect) {
                        console.error('Score keeper select not found');
                        return;
                    }

                    scoreKeeperSelect.innerHTML = ''; // Clear existing options
                    players.forEach(player => {
                        const option = document.createElement('option');
                        option.value = player.player_id;
                        option.text = `${player.player_first} ${player.player_last}`;
                        scoreKeeperSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching players:', error));
        }


        document.addEventListener('DOMContentLoaded', () => {

            const scheduleMakeupRadioButtons = document.querySelectorAll('input[name="schedule_makeup"]');
            
            // Add event listener for radio button change
            scheduleMakeupRadioButtons.forEach(radioButton => {
                radioButton.addEventListener('change', event => {
                    const makeupGMValue = event.target.value;
                    
                    // Toggle the visibility of the schedule_makeup div based on the selected value
                    const scheduleMakeupDiv = document.getElementById('schedule_makeup');
                    if (makeupGMValue === '1') {
                        scheduleMakeupDiv.style.display = 'block';
                    } else {
                        scheduleMakeupDiv.style.display = 'none';
                    }
                });
            });
            
            // Manually trigger the change event on the radio button initially
            const initialMakeupGMValue = document.querySelector('input[name="schedule_makeup"]:checked').value;
            const scheduleMakeupDiv = document.getElementById('schedule_makeup');
            if (initialMakeupGMValue === '1') {
                scheduleMakeupDiv.style.display = 'block';
            } else {
                scheduleMakeupDiv.style.display = 'none';
            }
            
            const scheduleWeekSelect = document.getElementById('schedule_makeupwk');
            const seasonID = <%= schedule.schedule_season %>;
            const initialWeek = scheduleWeekSelect.value; // Get initial selected week

            // Populate matchups select with matchups of initial week
            populateMatchupsSelect(initialWeek, seasonID);
            
            // Add event listener for week change
            scheduleWeekSelect.addEventListener('change', event => {
                const selectedWeek = event.target.value;
                const seasonID = <%= schedule.schedule_season %>;
                
                populateMatchupsSelect(selectedWeek, seasonID);
            });

            const scoreKeeperTeamSelect = document.getElementById('schedule_sk_team');
            const initialTeamId = scoreKeeperTeamSelect.value; // Get initial selected team

            // Populate score keeper select with players of initial team
            populateScoreKeeperSelect(initialTeamId);

            // Add event listener for team change
            scoreKeeperTeamSelect.addEventListener('change', event => {
                const selectedTeamId = event.target.value;
                populateScoreKeeperSelect(selectedTeamId);
            });
        });

    </script>
</body>
</html>
